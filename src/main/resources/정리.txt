
    해싱 알고리즘 쓰는 이유
        db 보안을 위해 비밀번호를 암호화한다
        해싱이란 임의의 문자열로 변경하는 것이다.
        spring security default 해싱알고리즘 bcrypt

    해싱 알고리즘 쓸때 솔트를 쓰는 이유
        미리 문자열을 해싱알고리즘에 돌려 테이블을 만들어 비밀번호를 유추할 수 있다.
        따라서 db에 저장할때 솔트 값을 같이 저장한다
        bcrypt 경우 솔트를 랜덤한 값을 써도 괜찮다, 해싱된 결과 값이 매번 다르다
        bcrypt의 장점 속도를 일부러 늦춰 해커들이 많이 시도하지 못하게 함

        -그럼에도 로그인을 할 수 있는 이유는
         솔트 값은 인코딩할때만 사용하고, 평문과 해시된 값을 다시 해싱하면 원래 해시값이 나온다

    프론트 엔드 라이브러리 설정, 프론트 라이브러리 cdn url 쓰는 것이 아닌 패키지내에 패키지화 시킬 수 있다
        bootstrap 5 되면서 부트스트랩 기능을 구별하기위해 bs 키워드 사용 ex) data-toggle -> data-bs-toggle
        WebJar vs Npm (의존성 관리 툴)
            webjar 단점 라이브러리 업데이터가 느리다
            npm으로 의존성 관리

    뷰 중복 코드 제거
        타임리프 프레그먼트(Fragement) 사용하기

    세션
        서버쪽에 session 메모리가 있고 클라이언트는 session id로 접속한다.
        세션은 기본 timout 30분, 늘릴 수 있지만 세션 메모리가 늘어난다.

    세션이 만료 되더라도 로그인 유지 하고 싶은 방법
        쿠키에 인증 정보를 남겨두고 세션이 만료 됐을 때 쿠키에 남아있는 정보로 인증
        문제 쿠키 탈취 당했을 때 계정 정보 탈취 당함

        - 개선 방법, Username과 토큰을 사용해서 쿠키를 계속해서 바꾸는 것
        - 더 개선 방법 username과 토큰, 시리즈(랜점, 고정) 된 것을 사용해서 쿠키가 탈취 당했는 지 검증하는 것
           username과 토큰으로 인증 (해커) 인증 성공 -> 실제 사용자 토큰 인증 실패하지만 시리즈 유효 => 토큰 탈취된 것으로 판단, 쿠키 모두 삭제

    * JPA 영속성

       Open EntityManager (또는 Session) In View 필터
           요청을 처리하는 전체 프로세스에다가 JPA EntityManger(영속성 컨텍스트)를 바인딩 시켜주는 필터
           뷰를 랜더링 할때까지 영속성 컨텍스를 유지하기 때문에 필요한 데이터를 렌더링 하는 시점에 추가로 읽어올 수 있다
           엔티티 객체 변경은 반드시 트랜젝션 안에서 할 것 - 그래야 트랜젹션 종료 직전 또는 필요한 시점에 변경사항을 DB에 반영

    * validate 할때 model에 검증 객체와 error가 담긴다 DataBinder 해준다다

   * 객체의 상태를 변경하는 것 -> post mapping
   * 비즈니스 로직 차원에서 고민해야 것
        ui에서 노출하는 정보와 서버에서 처리하는 에러처리가 어느 정도 일치해야 한다.
            ui로 접근하지 못하게 막았을 때 악의적인 사용자가 접근할 경우 bad request
            ui로 접근가능 하지만 비즈니스 로직에 어긋나는 경우 경우 예외 처리


   * 문자열 String aa = ".." 등의 선언은 리터럴 방식, immutable, String Object이다

   * ManyToOne, OneToMany 양쪽 테이블 어노테이션 만 있는 경우 -> 단방향 연관관계가 2개 생긴 것이다
   * OneToMany 쪽 연관관계에서 mappedBy를 사용했을 때 양방향이 된다.
   * 양방향일 경우 연관관계의 mapping 주인이 아닌 경우 연관 관계 값들을 바꾸어도 DB에 반영 안됨 ex) 도메인 Even 와 Enrollment

   * WEB 페이지 순수 HTML Form 에서는 method를 GET과 POST만 지원하기 때문에 보낼수 없다. 라이브러리가 delete 지원한다
   * HTML <FORM>에서 th:method에서 PUT 또는 DELETE를 사용해서 보내는 _method를 사용해서 @PutMapping과 @DeleteMapping으로 요청을 맵핑한다
     적용 방법 spring.mvc.hiddenmethod.filter.enabled=true, 적용시 히든 메서드를 값으로 requestMapping 해준다
     th:method 사용시 _method가 추가된다 (타임리프 제공)

   * 알림은 부가적인 일이고 메인 로직에 영향을 주고 싶지 않을 때, 코드는 최대한 주요 로직에 집중하고 알림 처리는 로직 분리
   => 비동기 async를 사용하는 것은 2가지 의미가 있음
       트랜잭션 내에서 영향을 주고 싶지 않기 위해(다른 쓰레드로 로직을 분리함으로써 트랜잭션에 영향을 주지 않는다 * 트랜잭션은 한 쓰레드 안에서...)
       응답 속도를 빠르게 하기 위해
   => ApplicationEventPublisher와 스프링 @Async 기능을 사용해서 비동기 이벤트 기반

   *ThreadPoolTaskExecutor(AsyncConfig 파일 참조)
       CorePoolSize, MaxPoolSize, QueueCapacity 처리할 태스크(이벤트)가 생겼을 때,

       ‘현재 일하고 있는 쓰레드 개수’(active thread)가 ‘코어 개수’(core pool size)보다 작으면 남아있는 쓰레드를 사용한다.
       ‘현재 일하고 있는 쓰레드 개수’가 코어 개수만큼 차있으면 ‘큐 용량’(queue capacity)이 찰때까지 큐에 쌓아둔다.
       큐 용량이 다 차면, 코어 개수를 넘어서 ‘맥스 개수’(max pool size)에 다르기 전까지 새로운 쓰레드를 만들어 처리한다.
       맥스 개수를 넘기면 태스크를 처리하지 못한다.

   * spring 트랜잭션은 기본적으로 REQUIRED 이다. 부모 트랜잭션에 참여하며, 없으면 새로운 트랜잭션을 시작한다. 트랜잭션은 선언과 가장 가까운 트랜잭션이 채택된다

   * @tranactional(readOn = true)는 단지 실제 트랜잭션 하위 시스템에 대한 힌트이다. 실제 db에서 적절하게 알맞게 처리한다.

   * ibernate 에서 readOnly 설정이 들어갈 경우 트랜잭션 commit 시, 자동으로 flush 를 하지 않는다
     정확히는 session 의 flush_mode 가 FLUSH_MANUAL 로 변경

   * querydsl 사용 (확장구현체를 만드는 방법)
     ex) StudyRepostiory에 적용시 인터페이스를 만들고, 이 인터페이스 구현체는 뒤에 Impl을 붙여야 한다. StudyRepostiory(커스텀이름)Impl

   * 여러개의 커스텀 repository가 있는 경우 메소드 시그니처가 겹칠 때 제일 먼저 선언 된것으로 사용
   * 우선순위 : 커스텀 repository > 기본 curd repository

   * N+1 Select 문제 해결
     left (outer) join + fetchJoin + distinct로 해결. leftjoin은 fetchjoin을 하기 위해서 한다. fetchjoin은 join 관계의 데이터도 같이 가져온다, 중복데이터 distinct 해결
     querydsl distinct() -> sql 상으로 전체 row에 대한 distinct 이지만 jpa가 쿼리 결과에 distinct 한 result만 가져온다 (transformer로 resultset 파싱할때 중복 result 삭제)

     ( jpa 발생 쿼리 잘 볼것 (where 절 기존의 join 결과를 사용하는 것이 아닌 서브 쿼리를 만들 수 있음) )

   * 페이지 기본값 20, Pageable 사용한다. 기본값 설정 @PageableDefault 사용
     페이지 사용시에 전체 갯수를 가져와야 되서 count 쿼리가 하나 더 발생한다